-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error(msg, loc) {
  failure("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue(atr, v, loc) {
  case atr of
    Ref -> error("reference expected", loc)
    | Void -> Ignore(v)
    | _ -> v
  esac
}

fun assertVoid(atr, v, loc) {
  case atr of
    Void -> v
    | Val -> error("value expected", loc)
    | _ -> error("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
    fun (a) {
      assertValue(a, Binop(op, l(Val), r(Val)), loc)
    }
  }
  ]
}

var primary = memo $ eta syntax (
  loc = pos x = decimal{ fun (a) { assertValue(a, Const(stringInt(x)), loc) } } |
  x = lident { fun (a) {
    case a of
      Ref -> Ref(x)
      | Void -> Ignore(Var(x))
      | _ -> Var(x)
    esac
  } } |
  kSkip { fun (a) { Skip } } |
  kRead v = inbr[s("("), exp, s(")")] { fun (a) { Read(v(Ref)) } } |
  kWrite e = inbr[s("("), exp, s(")")] { fun (a) { Write(e(Val)) } } |
  s = stmt_while{ s } |
  s = stmt_if { s } |
  inbr[s("("), exp, s(")")]
),
    stmt_while = memo $ eta syntax (
    kWhile cond = exp kDo body = exp kOd { fun (a) { While(cond(Val), body(Void)) } } |
    kDo body = exp kWhile cond = exp kOd { fun (a) { DoWhile(body(Void), cond(Val)) } } |
    kFor init = exp s[","] e = exp s[","] i = exp kDo body = exp kOd { fun (a) { Seq(init(Void), While(e(Val), Seq(body(Void), i(Void))))} }
  ),
    stmt_if = memo $ eta syntax (
    kIf cond = exp kThen s1 = exp s2 = stmt_else { fun (a) { If(cond(Val), s1(a), s2(a)) } }
  ),
    stmt_else = memo $ eta syntax (
    kFi { fun (a) { Skip } } |
    kElse s = exp kFi { s } |
    kElif cond = exp kThen s1 = exp s2 = stmt_else { fun (a) { If(cond(Val), s1(a), s2(a)) } }
  ),
    basic = memo $ eta (expr({ [Right, { [s(":="),
    fun (l, loc, r) {
      fun (a) { assertValue(a, Assn(l(Ref), r(Val)), loc) }
    }] }],
    [Left, map(binop, { "!!" })],
    [Left, map(binop, { "&&" })],
    [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
    [Left, map(binop, { "+", "-" })],
    [Left, map(binop, { "*", "/", "%" })]
  },
    primary)),
    exp = memo $ eta syntax (basic | s1 = basic s[";"] s2 = exp { fun (a) { Seq(s1(Void), s2(a)) } });

-- Public top-level parser
public parse = syntax (s = exp { s(Void) });