-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, s, w], insns) {
  case insns of
    {} -> c
    | insn : insnRest ->
      case insn of
        CJMP (c, lab) ->
          case stack of
            v : stackRest -> eval (env, [stackRest, s, w], if v == c then fromLabel (env, lab) else insnRest fi)
          esac
        | JMP (lab) -> eval (env, c, fromLabel (env, lab))
        | _ -> eval (env, evalSimple (c, insn), insnRest)
      esac
  esac
}

fun evalSimple([stack, state, world], ins) {
  case ins of
    READ -> case readWorld(world) of
      [value, new_world] -> [value:stack, state, new_world]
    esac
    | WRITE -> case stack of
      cur : rest -> [rest, state, writeWorld(cur, world)]
    esac
    | BINOP(op) -> case stack of
      a : b : rest -> [evalBinOp(op, b, a):rest, state, world]
    esac
    | LD (name) -> [state(name):stack, state, world]
    | ST (name) -> case stack of
      value : rest -> [rest, state <- [name, value], world]
    esac
    | LABEL (_) -> [stack, state, world]
    | CONST (value) -> [value:stack, state, world]
    | LDA (x) -> [x : stack, state, world]
    | STI ->
      case stack of
        v : x : rest -> [v : rest, state <- [x, v], world]
      esac
    | DROP ->
      case stack of
        _ : rest -> [rest, state, world]
      esac
    | _ -> failure ("%s instruction not implemented", ins.string)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Var (name) -> singletonBuffer(LD(name))
    | Const (value) -> singletonBuffer(CONST(value))
    | Binop (op, expr1, expr2) -> compileExpr(expr1) <+> compileExpr(expr2) <+> singletonBuffer(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
    | Read (e) ->
        case env.genLabel of
          [e_label, env] ->
            case compile (e_label, env, e) of
              [e_label_used, env, e_code] -> [false, env,
                e_code
                  <+> label (e_label, e_label_used)
                  <+ READ
                  <+ STI <+ DROP
              ]
            esac
        esac
    | Write (e) ->
        case env.genLabel of
          [e_label, env] ->
            case compile (e_label, env, e) of
              [e_label_used, env, e_code] -> [false, env,
                e_code 
                  <+> label (e_label, e_label_used)
                  <+ WRITE
              ]
            esac
        esac
    | Assn (x, v) ->
        case env.genLabels (2) of
          [x_label, v_label, env] ->
            case compile (x_label, env, x) of
              [x_label_used, env, x_code] ->
                case compile (v_label, env, v) of
                  [v_label_used, env, v_code] -> [false, env,
                    x_code
                      <+> label (x_label, x_label_used)
                      <+> v_code
                      <+> label (v_label, v_label_used)
                      <+ STI
                  ]
                esac
            esac
        esac
    | While (condition, body) ->
        case env.genLabels(2) of
          [start_label, body_end_label, env] ->
            case compile (body_end_label, env, body) of
              [body_end_label_used, env, body_code] ->
                [true, env,
                  label (start_label, true)
                    <+> compileExpr (condition)
                    <+ CJMP (0, lab)
                    <+> body_code
                    <+> label (body_end_label, body_end_label_used)
                    <+ JMP (start_label)
                ]
            esac
        esac
      | If (condition, s1, s2) ->
        case env.genLabels(2) of
          [else_label, s1_end_label, env] ->
            case compile (s1_end_label, env, s1) of
              [s1_end_label_used, env, code1] ->
                case compile (lab, env, s2) of
                  [_, env, code2] ->
                    [true, env,
                      compileExpr (condition)
                        <+ CJMP (0, else_label)
                        <+> code1
                        <+> label(s1_end_label, s1_end_label_used)
                        <+ JMP (lab)
                        <+> label (else_label, true)
                        <+> code2
                        <+ JMP (lab)
                    ]
                esac
            esac
          esac
      | DoWhile (condition, body) ->
        case env.genLabels(2) of
          [start_label, body_end_label, env] ->
            case compile (body_end_label, env, condition) of
              [body_end_label_used, env, code] ->
                [true, env,
                  label (start_label, true)
                    <+> code
                    <+> label (body_end_label, body_end_label_used)
                    <+> compileExpr (body)
                    <+ CJMP (0, lab)
                    <+ JMP (start_label)
                ]
            esac
          esac
      | Var (x) -> [false, env, singletonBuffer (LD (x))]
      | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
      | Const (n) -> [false, env, singletonBuffer (CONST (n))]
      | Ignore (e) ->
        case env.genLabel of
          [e_label, env] ->
            case compile (e_label, env, e) of
              [e_label_used, env, e_code] -> [false, env,
                e_code
                  <+> label (e_label, e_label_used)
                  <+ DROP
              ]
            esac
        esac
      | Binop (op, e1, e2) ->
        case env.genLabels (2) of
          [e1_label, e2_label, env] ->
            case compile (e1_label, env, e1) of
              [e1_label_used, env, e1_code] ->
                case compile (e2_label, env, e2) of
                  [e2_label_used, env, e2_code] -> [false, env,
                    e1_code
                      <+> label (e1_label, e1_label_used)
                      <+> e2_code
                      <+> label (e2_label, e2_label_used)
                      <+ BINOP (op)
                  ]
                esac
            esac
        esac
      | Seq (e1, e2) ->
        case env.genLabel of
          [e1_label, env] ->
            case compile (e1_label, env, e1) of
              [e1_label_used, env, e1_code] ->
                case compile (lab, env, e2) of
                  [labUsed, env, e2_code] -> [labUsed, env,
                    e1_code
                      <+> label (e1_label, e1_label_used)
                      <+> e2_code
                  ]
                esac
            esac
        esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
